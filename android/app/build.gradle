plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Reads local.properties file and returns its contents as a Properties object
def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def flutterCompileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = 35
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = 25
}

def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = 35
}


// Reads keystore.properties file and returns its contents as a Properties object
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}


android {
    namespace = "com.tonggarden.easysales"
    compileSdk = flutterCompileSdkVersion.toInteger()
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    // Signing
    signingConfigs {
        debug {
            if (System.getenv()["CM_BUILD_ID"]) {                
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            }
            else {
                keyAlias keystoreProperties['dev.keyAlias']
                keyPassword keystoreProperties['dev.keyPassword']
                storeFile keystoreProperties['dev.storeFile'] ? file(keystoreProperties['dev.storeFile']) : null
                storePassword keystoreProperties['dev.storePassword']
            }

        }
        qa {
            if (System.getenv()["CM_BUILD_ID"]) {
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["FCI_KEY_PASSWORD"]
            }
            else {
                keyAlias keystoreProperties['qa.keyAlias']
                keyPassword keystoreProperties['qa.keyPassword']
                storeFile keystoreProperties['qa.storeFile'] ? file(keystoreProperties['qa.storeFile']) : null
                storePassword keystoreProperties['qa.storePassword']
            }

        }        
        release {
            if (System.getenv()["CM_BUILD_ID"]) {
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            }
            else {
                keyAlias keystoreProperties['prod.keyAlias']
                keyPassword keystoreProperties['prod.keyPassword']
                storeFile keystoreProperties['prod.storeFile'] ? file(keystoreProperties['prod.storeFile']) : null
                storePassword keystoreProperties['prod.storePassword']
            }

        }
    }

    // Flavors
    flavorDimensions "flavor"
    productFlavors {
        dev {
            dimension "flavor"
            applicationId "com.tonggarden.easysales"
            applicationIdSuffix ".dev"
            //versionNameSuffix " Dev"
            signingConfig signingConfigs.debug            
        }
        qa {
            dimension "flavor"
            applicationId "com.tonggarden.easysales"
            applicationIdSuffix ".qa"
            //versionNameSuffix " QA"
            signingConfig signingConfigs.qa            
        }
        prod {
            dimension "flavor"
            applicationId "com.tonggarden.easysales"
            signingConfig signingConfigs.release           
        }
    }

    defaultConfig {
        applicationId = "com.tonggarden.easysales"
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }

    buildTypes {
        debug {           
            signingConfig signingConfigs.debug
        }
        release {      
            minifyEnabled true
            shrinkResources true 
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'      
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation 'androidx.window:window:1.0.0'
    implementation 'androidx.window:window-java:1.0.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
}
